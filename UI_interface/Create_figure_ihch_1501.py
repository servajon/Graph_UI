# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'create_figure_ihch.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal

from Resources_file.Emit import Emit
from UI_interface.Cycle_Selection_QT import Line_edit


class Create_figure_ihch_1501(QtWidgets.QWidget):
    finish_signal = pyqtSignal(str)

    def __init__(self, parent, cycles_data):
        super(Create_figure_ihch_1501, self).__init__(parent)

        self.cycles_base = None
        self.setWindowFlags(QtCore.Qt.Dialog | QtCore.Qt.WindowCloseButtonHint)
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        self.emit = Emit()
        self.cycles_data = cycles_data

        # variable qui stock les cycles selectionnés
        self.cycles = None

        # variable qui stock les samples selectionnés
        self.samples = None

        # variable qui stock si saxs ou waxs est selectionné
        self.s_w = None

        # variable qui stock si frame ou scan est selectionné
        self.f_s = None

        self.setupUi(self)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(285, 366)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.lineEdit = Line_edit(self)
        self.lineEdit.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_2.addLayout(self.horizontalLayout)

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_9 = QtWidgets.QLabel(Dialog)
        self.label_9.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label_9)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.lineEdit_4 = Line_edit(self)
        self.lineEdit_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.horizontalLayout_3.addWidget(self.lineEdit_4)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.radioButton_4 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_4.setObjectName("radioButton_4")
        self.buttonGroup_2 = QtWidgets.QButtonGroup(Dialog)
        self.buttonGroup_2.setObjectName("buttonGroup_2")
        self.buttonGroup_2.addButton(self.radioButton_4)
        self.horizontalLayout_5.addWidget(self.radioButton_4)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem2)
        self.radioButton_5 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_5.setObjectName("radioButton_5")
        self.buttonGroup_2.addButton(self.radioButton_5)
        self.horizontalLayout_5.addWidget(self.radioButton_5)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.radioButton_2 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_2.setObjectName("radioButton_2")
        self.buttonGroup = QtWidgets.QButtonGroup(Dialog)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.radioButton_2)
        self.horizontalLayout_2.addWidget(self.radioButton_2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.radioButton_3 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_3.setObjectName("radioButton_3")
        self.buttonGroup.addButton(self.radioButton_3)
        self.horizontalLayout_2.addWidget(self.radioButton_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 25))
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.line = QtWidgets.QFrame(Dialog)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.radioButton = QtWidgets.QRadioButton(Dialog)
        self.radioButton.setObjectName("radioButton")
        self.buttonGroup_3 = QtWidgets.QButtonGroup(Dialog)
        self.buttonGroup_3.setObjectName("buttonGroup_3")
        self.buttonGroup_3.addButton(self.radioButton)
        self.verticalLayout.addWidget(self.radioButton)
        self.radioButton_6 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_6.setObjectName("radioButton_6")
        self.buttonGroup_3.addButton(self.radioButton_6)
        self.verticalLayout.addWidget(self.radioButton_6)
        self.radioButton_7 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_7.setObjectName("radioButton_7")
        self.buttonGroup_3.addButton(self.radioButton_7)
        self.verticalLayout.addWidget(self.radioButton_7)
        self.verticalLayout_2.addLayout(self.verticalLayout)

        self.cycle_to_layout = None
        self.cycle_numbers_layout = None
        self.cycle_all_layout = None

        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_4.addWidget(self.pushButton_3)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem9)
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_4.addWidget(self.pushButton_5)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.radioButton.clicked.connect(self.click_radio)
        self.radioButton_6.clicked.connect(self.click_radio)
        self.radioButton_7.clicked.connect(self.click_radio)

        self.radioButton_2.clicked.connect(self.frame_scan_grp)
        self.radioButton_3.clicked.connect(self.frame_scan_grp)

        self.radioButton.setChecked(True)
        self.radioButton_2.setChecked(True)
        self.radioButton_4.setChecked(True)

        self.create_cycle_all_layout()

        self.pushButton_3.clicked.connect(self.save)
        self.pushButton_5.clicked.connect(self.cancel)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog",
                                      "<html><head/><body><p><span style=\" font-size:12pt;\">Cycle</span></p></body></html>"))
        self.label_9.setText(_translate("Dialog",
                                        "<html><head/><body><p><span style=\" font-size:12pt;\">Sample</span></p></body></html>"))
        self.radioButton_4.setText(_translate("Dialog", "Saxs"))
        self.radioButton_5.setText(_translate("Dialog", "Waxs"))
        self.radioButton_2.setText(_translate("Dialog", "Frame"))
        self.radioButton_3.setText(_translate("Dialog", "Scan"))
        self.label_2.setText(_translate("Dialog",
                                        "<html><head/><body><p><span style=\" font-size:12pt;\">Frame Selection</span></p></body></html>"))
        self.radioButton.setText(_translate("Dialog", "All"))
        self.radioButton_6.setText(_translate("Dialog", "Manual sélection"))
        self.radioButton_7.setText(_translate("Dialog", "Range"))

        self.pushButton_3.setText(_translate("Dialog", "Save"))
        self.pushButton_5.setText(_translate("Dialog", "Cancel"))

    def click_radio(self):
        if self.radioButton.isChecked():
            if self.cycle_numbers_layout is not None:
                self.delete_cycle_numbers_layout()
            elif self.cycle_to_layout is not None:
                self.delete_cycle_to_layout()

            if self.cycle_all_layout is None:
                self.create_cycle_all_layout()
                self.update()

        elif self.radioButton_6.isChecked():
            if self.cycle_all_layout is not None:
                self.delete_cycle_all_layout()
            elif self.cycle_to_layout is not None:
                self.delete_cycle_to_layout()

            if self.cycle_numbers_layout is None:
                self.create_cycle_numbers_layout()
                self.update()

        else:
            if self.cycle_all_layout is not None:
                self.delete_cycle_all_layout()
            elif self.cycle_numbers_layout is not None:
                self.delete_cycle_numbers_layout()

            if self.cycle_to_layout is None:
                self.create_cycle_to_layout()
                self.update()

    """----------------------------------------------------------------------------------"""

    def create_cycle_to_layout(self):
        self.cycle_to_layout = QtWidgets.QHBoxLayout()
        self.cycle_to_layout.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self)
        self.label_3.setObjectName("label_3")
        self.cycle_to_layout.addWidget(self.label_3)

        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.cycle_to_layout.addItem(spacerItem1)

        self.lineEdit_2 = Line_edit(self)
        self.lineEdit_2.setMaximumSize(QtCore.QSize(35, 16777215))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.cycle_to_layout.addWidget(self.lineEdit_2)

        self.label_4 = QtWidgets.QLabel(self)
        self.label_4.setObjectName("label_4")
        self.cycle_to_layout.addWidget(self.label_4)

        self.lineEdit_3 = Line_edit(self)
        self.lineEdit_3.setMaximumSize(QtCore.QSize(35, 16777215))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.cycle_to_layout.addWidget(self.lineEdit_3)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.cycle_to_layout.addItem(spacerItem2)
        self.verticalLayout_2.insertLayout(5, self.cycle_to_layout)
        _translate = QtCore.QCoreApplication.translate
        self.label_3.setText(_translate("Dialog",
                                        "<html><head/><body><p><span style=\" font-size:12pt;\">Numbers :"
                                        "</span></p></body></html>"))
        self.label_4.setText(
            _translate("Dialog", "<html><head/><body><p><span style=\" font-size:12pt;\">to</span></p></body></html>"))

    """----------------------------------------------------------------------------------"""

    def delete_cycle_to_layout(self):
        self.lineEdit_3.deleteLater()
        self.label_4.deleteLater()
        self.lineEdit_2.deleteLater()
        self.label_3.deleteLater()
        self.cycle_to_layout.deleteLater()
        self.cycle_to_layout = None

    """----------------------------------------------------------------------------------"""

    def create_cycle_numbers_layout(self):
        self.cycle_numbers_layout = QtWidgets.QHBoxLayout()
        self.cycle_numbers_layout.setObjectName("cycle_numbers_layout")
        self.label_8 = QtWidgets.QLabel(self)
        self.label_8.setObjectName("label_8")
        self.cycle_numbers_layout.addWidget(self.label_8)

        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.cycle_numbers_layout.addItem(spacerItem3)

        self.lineEdit_5 = Line_edit(self)
        self.lineEdit_5.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.lineEdit_5.setObjectName("lineEdit_2")
        self.cycle_numbers_layout.addWidget(self.lineEdit_5)

        self.verticalLayout_2.insertLayout(5, self.cycle_numbers_layout)

        _translate = QtCore.QCoreApplication.translate
        self.label_8.setText(_translate("Dialog",
                                        "<html><head/><body><p><span style=\" font-size:12pt;\">Numbers :"
                                        "</span></p></body></html>"))

    """----------------------------------------------------------------------------------"""

    def delete_cycle_numbers_layout(self):
        self.lineEdit_5.deleteLater()
        self.label_8.deleteLater()
        self.cycle_numbers_layout.deleteLater()
        self.cycle_numbers_layout = None

    """----------------------------------------------------------------------------------"""

    def create_cycle_all_layout(self):
        self.cycle_all_layout = QtWidgets.QHBoxLayout()
        self.cycle_all_layout.setObjectName("cycle_all_layout")
        self.label_5 = QtWidgets.QLabel(self)
        self.label_5.setObjectName("label_5")
        self.label_5.setMaximumSize(QtCore.QSize(16777215, 30))
        self.cycle_all_layout.addWidget(self.label_5)

        spacerItem3 = QtWidgets.QSpacerItem(46, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.cycle_all_layout.addItem(spacerItem3)

        self.label_6 = QtWidgets.QLabel(self)
        self.label_6.setObjectName("label_6")
        self.label_6.setMaximumSize(QtCore.QSize(35, 20))
        self.cycle_all_layout.addWidget(self.label_6)

        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.cycle_all_layout.addItem(spacerItem3)

        self.verticalLayout_2.insertLayout(5, self.cycle_all_layout)
        _translate = QtCore.QCoreApplication.translate
        self.label_5.setText(_translate("Dialog",
                                        "<html><head/><body><p><span style=\" font-size:12pt;\">Numbers :"
                                        "</span></p></body></html>"))

        self.label_6.setText(_translate("Dialog",
                                        "<html><head/><body><p><span style=\" font-size:12pt;\">all"
                                        "</span></p></body></html>"))

    """----------------------------------------------------------------------------------"""

    def delete_cycle_all_layout(self):
        self.label_5.deleteLater()
        self.label_6.deleteLater()
        self.cycle_all_layout.deleteLater()
        self.cycle_all_layout = None

    """----------------------------------------------------------------------------------"""

    def save(self):
        """
        Fonction qui emit le résultat de la fenêtre
        Le signal est de la forme :

        rep : save / cancel
        arg : all / to / selected
        cycle : array_cycle / None

        :return: None
        """

        if self.lineEdit.text() == "":
            self.emit.emit("msg_console", type="msg_console", str="Empty cycle selection",
                           foreground_color="red")
            return
        else:
            temp = self.lineEdit.text().split(" ")
            array = []
            for data in temp:
                data = int(data)
                if data not in array:
                    array.append(data - 1)

            array.sort()

            if array[-1] >= len(self.cycles_data) or array[0] < 0:
                self.emit.emit("msg_console", type="msg_console", str="Cycle number between " + str(1) + " and " +
                                                                      str(len(self.cycles_data)),
                               foreground_color="red")
                return

            self.cycles_base = array


        if self.lineEdit_4.text() == "":
            self.emit.emit("msg_console", type="msg_console", str="Empty sample selection",
                           foreground_color="red")
            return
        else:
            temp = self.lineEdit_4.text().split(" ")
            array = []
            for data in temp:
                data = int(data)
                if data not in array:
                    for num_cycle in self.cycles_base:
                        if data > len(self.cycles_data[num_cycle].saxs):
                            self.emit.emit("msg_console", type="msg_console",
                                           str="Sample number between " + str(1) + " and " +
                                               str(len(self.cycles_data[num_cycle].saxs)) +
                                               " for the cycle " + self.cycles_data[
                                                   num_cycle].name,
                                           foreground_color="red")
                            return


                    array.append(data - 1)

            array.sort()
            self.samples = array

        if self.radioButton_4.isChecked():
            self.s_w = "saxs"
        else:
            self.s_w = "waxs"

        if self.radioButton_2.isChecked():
            self.f_s = "frame"
        else:
            self.f_s = "scan"

        if self.cycle_to_layout is not None:
            if self.lineEdit_2.text() == "" or self.lineEdit_3.text() == "":
                self.emit.emit("msg_console", type="msg_console", str="Empty " + self.f_s + " selection",
                               foreground_color="red")
                return
            elif int(self.lineEdit_2.text()) > int(self.lineEdit_3.text()):
                self.emit.emit("msg_console", type="msg_console", str="Left number is largeur than the right one",
                               foreground_color="red")
                return
            else:
                if self.f_s == "frame":
                    if int(self.lineEdit_2.text()) < 1:
                        self.emit.emit("msg_console", type="msg_console",
                                       str="Frame number should be larger than 0", foreground_color="red")
                        return

                    for num_cycle in self.cycles_base:
                        if int(self.lineEdit_3.text()) > self.cycles_data[num_cycle].get_nb_frame():
                            self.emit.emit("msg_console", type="msg_console",
                                           str="Frame number " + self.lineEdit_3.text() + " invalid for the cycle " +
                                               self.cycles_data[num_cycle].name, foreground_color="red")
                            return

                    self.cycles = [value - 1 for value in range(int(self.lineEdit_2.text()), int(self.lineEdit_3.text()) + 1)]
                else:
                    for num_cycle in self.cycles_base:
                        for i in self.samples:
                            if self.s_w == "saxs":
                                sample_saxs = self.cycles_data[num_cycle].saxs[i]

                                if not sample_saxs.is_scan_exist(self.lineEdit_2.text()):
                                    self.emit.emit("msg_console", type="msg_console",
                                                   str="Scan number " + self.lineEdit_2.text() + " invalid for the cycle " +
                                                       self.cycles_data[num_cycle].name, foreground_color="red")
                                    return

                                elif not sample_saxs.is_scan_exist(self.lineEdit_3.text()):
                                    self.emit.emit("msg_console", type="msg_console",
                                                   str="Scan number " + self.lineEdit_3.text() + " invalid for the cycle " +
                                                       self.cycles_data[num_cycle].name, foreground_color="red")
                                    return

                            else:
                                sample_waxs = self.cycles_data[num_cycle].waxs[i]
                                if not sample_waxs.is_scan_exist(self.lineEdit_2.text()):
                                    self.emit.emit("msg_console", type="msg_console",
                                                   str="Scan number " + self.lineEdit_2.text() + " invalid for the cycle " +
                                                       self.cycles_data[num_cycle].name, foreground_color="red")
                                    return

                                elif not sample_waxs.is_scan_exist(self.lineEdit_3.text()):
                                    self.emit.emit("msg_console", type="msg_console",
                                                   str="Scan number " + self.lineEdit_3.text() + " invalid for the cycle " +
                                                       self.cycles_data[num_cycle].name, foreground_color="red")
                                    return

                    if self.s_w == "waxs":
                        sample_waxs = self.cycles_data[self.cycles_base[0]].waxs[self.samples[0]]
                        self.cycles = sample_waxs.get_range(self.lineEdit_2.text(), self.lineEdit_3.text())
                    else:
                        sample_saxs = self.cycles_data[self.cycles_base[0]].saxs[self.samples[0]]
                        self.cycles = sample_saxs.get_range(self.lineEdit_2.text(), self.lineEdit_3.text())


        elif self.cycle_numbers_layout is not None:
            s = self.lineEdit_5.text()
            if s == "":
                self.emit.emit("msg_console", type="msg_console", str="Empty selection",
                               foreground_color="red")
                return
            else:
                temp = s.split(" ")
                array = []
                for data in temp:
                    if data not in array:
                        for num_cycle in self.cycles_base:
                            if self.f_s == "scan":
                                if self.s_w == "saxs":
                                    for i in self.samples:
                                        sample_saxs = self.cycles_data[num_cycle].saxs[i]

                                        if not sample_saxs.is_scan_exist(data):
                                            self.emit.emit("msg_console", type="msg_console",
                                                           str="Saxs scan number " + str(data) + " invalid for the sample " +
                                                               sample_saxs.name, foreground_color="red")
                                            return
                                else:
                                    for i in self.samples:
                                        sample_waxs = self.cycles_data[num_cycle].waxs[i]
                                        if not sample_waxs.is_scan_exist(data):
                                            self.emit.emit("msg_console", type="msg_console",
                                                           str="Waxs scan number " + str(data) + " invalid for the sample " +
                                                               sample_waxs.name, foreground_color="red")
                                            return

                                while len(data) < 4:
                                    data = "0" + data

                                array.append(data)

                            else:
                                if int(data) > self.cycles_data[num_cycle].get_nb_frame() or int(data) < 1:
                                    self.emit.emit("msg_console", type="msg_console",
                                                   str="Frame number " + data + " invalid for the cycle " +
                                                       self.cycles_data[num_cycle].name, foreground_color="red")
                                    return

                                array.append(int(data) - 1)

                self.cycles = array

        else:
            self.cycles = None

        """print(self.cycles_base)
        print(self.samples)
        print(self.f_s)
        print(self.s_w)
        print(self.cycles)"""

        self.finish_signal.emit("save")

    """----------------------------------------------------------------------------------"""

    def cancel(self):
        self.finish_signal.emit("cancel")

    """----------------------------------------------------------------------------------"""

    def closeEvent(self, event):
        self.finish_signal.emit("cancel")

    """----------------------------------------------------------------------------------"""

    def frame_scan_grp(self):
        _translate = QtCore.QCoreApplication.translate
        if self.radioButton_2.isChecked():
            self.label_2.setText(_translate("Dialog",
                                            "<html><head/><body><p><span style=\" font-size:12pt;\">Frame Selection</span></p></body></html>"))
        else:
            self.label_2.setText(_translate("Dialog",
                                            "<html><head/><body><p><span style=\" font-size:12pt;\">Scan Selection</span></p></body></html>"))
